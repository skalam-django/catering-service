# Generated by Django 3.2.8 on 2022-01-26 23:40

import auth_app.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import src.extra


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth_app', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=500)),
                ('ids', models.CharField(max_length=255)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AddIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'add_ingredient',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AddOther',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'add_other',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AddRation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'add_ration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AddVegetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'add_vegetable',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Dates',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'dates',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('authuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth_app.authuser')),
                ('fees_per_day', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('bank_account', models.TextField(blank=True, null=True)),
                ('total_amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('total_amount_paid', models.FloatField(blank=True, default=0.0, null=True)),
                ('total_amount_due', models.FloatField(blank=True, default=0.0, null=True)),
            ],
            options={
                'db_table': 'employee',
                'managed': True,
            },
            bases=('auth_app.employeeuser',),
            managers=[
                ('objects', auth_app.models.AuthUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmployeeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'employee_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EmployeeWork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_working', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.employee')),
            ],
            options={
                'db_table': 'employee_work',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
                ('ref_no', models.CharField(blank=True, max_length=6)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_upcoming', models.BooleanField(default=True)),
                ('is_running', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('location', models.TextField(blank=True, null=True)),
                ('deal_amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('total_item_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_employee_charge', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_luggage_charge', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_other_charge', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_event_cost', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_event_profit', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_amount_paid', models.FloatField(blank=True, default=0.0, null=True)),
                ('total_amount_due', models.FloatField(blank=True, default=0.0, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auth_app.customeruser')),
            ],
            options={
                'db_table': 'event',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_common', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ingredient',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='IngredientCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ingredient_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ItemCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'item_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LuggageCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'luggage_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MyWallet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('balance', models.FloatField(blank=True, default=0.0, null=True)),
                ('bank_account', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'my_wallet',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='OtherCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'other_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RationCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'ration_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('license_key', models.CharField(max_length=255, unique=True)),
                ('secret_key', models.CharField(max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'registration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'unit',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='VegetableCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'vegetable_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('authuser_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth_app.authuser')),
                ('bank_account', models.TextField(blank=True, null=True)),
                ('total_amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('total_amount_paid', models.FloatField(blank=True, default=0.0, null=True)),
                ('total_amount_due', models.FloatField(blank=True, default=0.0, null=True)),
            ],
            options={
                'db_table': 'vendor',
                'managed': True,
            },
            bases=('auth_app.vendoruser',),
            managers=[
                ('objects', auth_app.models.AuthUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='VendorCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'vendor_category',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='WorkDate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_modified_by', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee_work', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.employeework')),
                ('work_dates', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.dates')),
            ],
            options={
                'db_table': 'work_date',
                'managed': True,
                'unique_together': {('employee_work', 'work_dates')},
            },
        ),
        migrations.CreateModel(
            name='VendorTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('payment_mode', models.CharField(blank=True, max_length=255, null=True)),
                ('note', models.CharField(blank=True, max_length=512, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vendor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.vendor')),
            ],
            options={
                'db_table': 'vendor_transaction',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='vendor',
            name='vendor_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.vendorcategory'),
        ),
        migrations.CreateModel(
            name='Vegetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_common', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
                ('vegetable_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.vegetablecategory')),
            ],
            options={
                'db_table': 'vegetable',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Ration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_common', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ration_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.rationcategory')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'ration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Other',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('is_common', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('other_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.othercategory')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'other',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Menu',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idx', models.IntegerField(blank=True, default=0, null=True)),
                ('name', models.CharField(max_length=255)),
                ('menu_pdf', src.extra.ContentTypeRestrictedFileField(upload_to='menu-pdfs/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'menu',
                'managed': True,
                'unique_together': {('name', 'menu_pdf')},
            },
        ),
        migrations.CreateModel(
            name='Luggage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('lost_quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('lost_charge', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('per_day_charge', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('luggage_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.luggagecategory')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'luggage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('suggested_selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ingredients', models.ManyToManyField(blank=True, related_name='item_ingredient', through='src.AddIngredient', to='src.Ingredient')),
                ('item_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.itemcategory')),
                ('others', models.ManyToManyField(blank=True, related_name='item_other', through='src.AddOther', to='src.Other')),
                ('rations', models.ManyToManyField(blank=True, related_name='item_ration', through='src.AddRation', to='src.Ration')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
                ('vegetables', models.ManyToManyField(blank=True, related_name='item_vegetable', through='src.AddVegetable', to='src.Vegetable')),
            ],
            options={
                'db_table': 'item',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='ingredient',
            name='ingredient_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.ingredientcategory'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='unit',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit'),
        ),
        migrations.CreateModel(
            name='EventTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('payment_mode', models.CharField(blank=True, max_length=255, null=True)),
                ('note', models.CharField(blank=True, max_length=512, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.event')),
            ],
            options={
                'db_table': 'event_transaction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventLuggage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('return_quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('per_day_charge', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_days', models.IntegerField(blank=True, default=1, null=True, validators=[django.core.validators.MinValueValidator(1)])),
                ('total_charge', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_lost_charge', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.event')),
                ('luggage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.luggage')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'event_luggage',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EventItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('total_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.event')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'event_item',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='event',
            name='item',
            field=models.ManyToManyField(related_name='event_item', through='src.EventItem', to='src.Item'),
        ),
        migrations.AddField(
            model_name='event',
            name='luggage',
            field=models.ManyToManyField(related_name='event_luggage', through='src.EventLuggage', to='src.Luggage'),
        ),
        migrations.CreateModel(
            name='EstimatedVegetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
                ('vegetable', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.vegetable')),
            ],
            options={
                'db_table': 'estimated_vegetable',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EstimatedRation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.ration')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'estimated_ration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EstimatedOther',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('other', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.other')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'estimated_other',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EstimatedIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('suggested_quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ingredient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.ingredient')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'estimated_ingredient',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='employeework',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.event'),
        ),
        migrations.AddField(
            model_name='employeework',
            name='last_processed_date',
            field=models.ManyToManyField(related_name='work_date_last_processed_date', to='src.Dates'),
        ),
        migrations.AddField(
            model_name='employeework',
            name='work_dates',
            field=models.ManyToManyField(related_name='work_date_dates', through='src.WorkDate', to='src.Dates'),
        ),
        migrations.CreateModel(
            name='EmployeeTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(blank=True, default=0.0, null=True)),
                ('payment_mode', models.CharField(blank=True, max_length=255, null=True)),
                ('note', models.CharField(blank=True, max_length=512, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.employee')),
            ],
            options={
                'db_table': 'employee_transaction',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='employee',
            name='employee_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.employeecategory'),
        ),
        migrations.AddField(
            model_name='addvegetable',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item'),
        ),
        migrations.AddField(
            model_name='addvegetable',
            name='unit',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit'),
        ),
        migrations.AddField(
            model_name='addvegetable',
            name='vegetable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.vegetable'),
        ),
        migrations.AddField(
            model_name='addration',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item'),
        ),
        migrations.AddField(
            model_name='addration',
            name='ration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.ration'),
        ),
        migrations.AddField(
            model_name='addration',
            name='unit',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit'),
        ),
        migrations.AddField(
            model_name='addother',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item'),
        ),
        migrations.AddField(
            model_name='addother',
            name='other',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.other'),
        ),
        migrations.AddField(
            model_name='addother',
            name='unit',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit'),
        ),
        migrations.AddField(
            model_name='addingredient',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.ingredient'),
        ),
        migrations.AddField(
            model_name='addingredient',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item'),
        ),
        migrations.AddField(
            model_name='addingredient',
            name='unit',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit'),
        ),
        migrations.CreateModel(
            name='AddCommonVegetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'add_common_vegetable',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AddCommonRation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'add_common_ration',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AddCommonOther',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'add_common_other',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AddCommonIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purchase_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('selling_price', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0)])),
                ('quantity', models.FloatField(blank=True, default=1.0, null=True, validators=[django.core.validators.MinValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.item')),
                ('unit', models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='src.unit')),
            ],
            options={
                'db_table': 'add_common_ingredient',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CommonIngredient',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.ingredient',),
        ),
        migrations.CreateModel(
            name='CommonOther',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.other',),
        ),
        migrations.CreateModel(
            name='CommonRation',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.ration',),
        ),
        migrations.CreateModel(
            name='CommonVegetable',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.vegetable',),
        ),
        migrations.CreateModel(
            name='EventIngredient',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.event',),
        ),
        migrations.CreateModel(
            name='EventOther',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.event',),
        ),
        migrations.CreateModel(
            name='EventRation',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.event',),
        ),
        migrations.CreateModel(
            name='EventVegetable',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('src.event',),
        ),
        migrations.AddConstraint(
            model_name='vegetable',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='vegetable',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='ration',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_ration'),
        ),
        migrations.AddConstraint(
            model_name='ration',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_ration'),
        ),
        migrations.AddConstraint(
            model_name='other',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_other'),
        ),
        migrations.AddConstraint(
            model_name='other',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_other'),
        ),
        migrations.AddConstraint(
            model_name='luggage',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_luggage'),
        ),
        migrations.AddConstraint(
            model_name='luggage',
            constraint=models.CheckConstraint(check=models.Q(('lost_quantity__gte', 0.0)), name='lost_quantity_limit_luggage'),
        ),
        migrations.AddConstraint(
            model_name='luggage',
            constraint=models.CheckConstraint(check=models.Q(('total_quantity__gte', 0.0)), name='total_quantity_limit_luggage'),
        ),
        migrations.AddConstraint(
            model_name='luggage',
            constraint=models.CheckConstraint(check=models.Q(('lost_charge__gte', 1.0)), name='lost_charge_limit_luggage'),
        ),
        migrations.AddConstraint(
            model_name='luggage',
            constraint=models.CheckConstraint(check=models.Q(('per_day_charge__gte', 1.0)), name='per_day_charge_limit_luggage'),
        ),
        migrations.AddField(
            model_name='item',
            name='common_ingredients',
            field=models.ManyToManyField(blank=True, related_name='item_common_ingredient', through='src.AddCommonIngredient', to='src.CommonIngredient'),
        ),
        migrations.AddField(
            model_name='item',
            name='common_others',
            field=models.ManyToManyField(blank=True, related_name='item_common_other', through='src.AddCommonOther', to='src.CommonOther'),
        ),
        migrations.AddField(
            model_name='item',
            name='common_rations',
            field=models.ManyToManyField(blank=True, related_name='item_common_ration', through='src.AddCommonRation', to='src.CommonRation'),
        ),
        migrations.AddField(
            model_name='item',
            name='common_vegetables',
            field=models.ManyToManyField(blank=True, related_name='item_common_vegetable', through='src.AddCommonVegetable', to='src.CommonVegetable'),
        ),
        migrations.AddConstraint(
            model_name='ingredient',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='ingredient',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='eventluggage',
            constraint=models.CheckConstraint(check=models.Q(('per_day_charge__gte', 0.0)), name='per_day_charge_limit_event_luggage'),
        ),
        migrations.AddConstraint(
            model_name='eventluggage',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_event_luggage'),
        ),
        migrations.AddConstraint(
            model_name='eventluggage',
            constraint=models.CheckConstraint(check=models.Q(('return_quantity__gte', 0.0)), name='return_quantity_limit_event_luggage'),
        ),
        migrations.AddConstraint(
            model_name='eventluggage',
            constraint=models.CheckConstraint(check=models.Q(('total_days__gte', 1)), name='total_days_limit_event_luggage'),
        ),
        migrations.AddConstraint(
            model_name='eventluggage',
            constraint=models.CheckConstraint(check=models.Q(('total_charge__gte', 0.0)), name='total_charge_limit_event_luggage'),
        ),
        migrations.AddConstraint(
            model_name='eventluggage',
            constraint=models.CheckConstraint(check=models.Q(('total_lost_charge__gte', 0.0)), name='total_lost_charge_limit_event_luggage'),
        ),
        migrations.AlterUniqueTogether(
            name='eventluggage',
            unique_together={('event', 'luggage', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='eventitem',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_event_item'),
        ),
        migrations.AddConstraint(
            model_name='eventitem',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_event_item'),
        ),
        migrations.AddConstraint(
            model_name='eventitem',
            constraint=models.CheckConstraint(check=models.Q(('total_price__gte', 0.0)), name='total_price_limit_event_item'),
        ),
        migrations.AlterUniqueTogether(
            name='eventitem',
            unique_together={('event', 'item', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('total_item_price__gte', 0.0)), name='total_item_price_limit_event'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('total_employee_charge__gte', 0.0)), name='total_employee_charge_limit_event'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('total_luggage_charge__gte', 0.0)), name='total_luggage_charge_limit_event'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('total_event_cost__gte', 0.0)), name='total_event_cost_limit_event'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.CheckConstraint(check=models.Q(('total_event_profit__gte', 0.0)), name='total_event_profit_limit_event'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('name', 'client', 'start_date'), ('name', 'client', 'end_date')},
        ),
        migrations.AddField(
            model_name='estimatedvegetable',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.eventvegetable'),
        ),
        migrations.AddField(
            model_name='estimatedration',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.eventration'),
        ),
        migrations.AddField(
            model_name='estimatedother',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.eventother'),
        ),
        migrations.AddField(
            model_name='estimatedingredient',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.eventingredient'),
        ),
        migrations.AlterUniqueTogether(
            name='employeework',
            unique_together={('employee', 'event')},
        ),
        migrations.AddConstraint(
            model_name='addvegetable',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='addvegetable',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='addvegetable',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_vegetable'),
        ),
        migrations.AlterUniqueTogether(
            name='addvegetable',
            unique_together={('item', 'vegetable', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='addration',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_ration'),
        ),
        migrations.AddConstraint(
            model_name='addration',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_ration'),
        ),
        migrations.AddConstraint(
            model_name='addration',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_ration'),
        ),
        migrations.AlterUniqueTogether(
            name='addration',
            unique_together={('item', 'ration', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='addother',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_other'),
        ),
        migrations.AddConstraint(
            model_name='addother',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_other'),
        ),
        migrations.AddConstraint(
            model_name='addother',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_other'),
        ),
        migrations.AlterUniqueTogether(
            name='addother',
            unique_together={('item', 'other', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='addingredient',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='addingredient',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='addingredient',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_ingredient'),
        ),
        migrations.AlterUniqueTogether(
            name='addingredient',
            unique_together={('item', 'ingredient', 'unit')},
        ),
        migrations.AddField(
            model_name='addcommonvegetable',
            name='common_vegetable',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.commonvegetable'),
        ),
        migrations.AddField(
            model_name='addcommonration',
            name='common_ration',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.commonration'),
        ),
        migrations.AddField(
            model_name='addcommonother',
            name='common_other',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.commonother'),
        ),
        migrations.AddField(
            model_name='addcommoningredient',
            name='common_ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='src.commoningredient'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_item'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(check=models.Q(('suggested_selling_price__gte', 0.0)), name='suggested_selling_price_limit_item'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_item'),
        ),
        migrations.AddConstraint(
            model_name='item',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_item'),
        ),
        migrations.AddConstraint(
            model_name='estimatedvegetable',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_estimated_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='estimatedvegetable',
            constraint=models.CheckConstraint(check=models.Q(('suggested_quantity__gte', 0.0)), name='suggested_quantity_limit_estimated_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='estimatedvegetable',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0.0)), name='quantity_limit_estimated_vegetable'),
        ),
        migrations.AlterUniqueTogether(
            name='estimatedvegetable',
            unique_together={('event', 'vegetable')},
        ),
        migrations.AddConstraint(
            model_name='estimatedration',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_estimated_ration'),
        ),
        migrations.AddConstraint(
            model_name='estimatedration',
            constraint=models.CheckConstraint(check=models.Q(('suggested_quantity__gte', 0.0)), name='suggested_quantity_limit_estimated_ration'),
        ),
        migrations.AddConstraint(
            model_name='estimatedration',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0.0)), name='quantity_limit_estimated_ration'),
        ),
        migrations.AlterUniqueTogether(
            name='estimatedration',
            unique_together={('event', 'ration')},
        ),
        migrations.AddConstraint(
            model_name='estimatedother',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_estimated_other'),
        ),
        migrations.AddConstraint(
            model_name='estimatedother',
            constraint=models.CheckConstraint(check=models.Q(('suggested_quantity__gte', 1.0)), name='suggested_quantity_limit_estimated_other'),
        ),
        migrations.AddConstraint(
            model_name='estimatedother',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_estimated_other'),
        ),
        migrations.AlterUniqueTogether(
            name='estimatedother',
            unique_together={('event', 'other')},
        ),
        migrations.AddConstraint(
            model_name='estimatedingredient',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_estimated_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='estimatedingredient',
            constraint=models.CheckConstraint(check=models.Q(('suggested_quantity__gte', 0.0)), name='suggested_quantity_limit_estimated_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='estimatedingredient',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 0.0)), name='quantity_limit_estimated_ingredient'),
        ),
        migrations.AlterUniqueTogether(
            name='estimatedingredient',
            unique_together={('event', 'ingredient')},
        ),
        migrations.AddConstraint(
            model_name='addcommonvegetable',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_common_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='addcommonvegetable',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_common_vegetable'),
        ),
        migrations.AddConstraint(
            model_name='addcommonvegetable',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_common_vegetable'),
        ),
        migrations.AlterUniqueTogether(
            name='addcommonvegetable',
            unique_together={('item', 'common_vegetable', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='addcommonration',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_common_ration'),
        ),
        migrations.AddConstraint(
            model_name='addcommonration',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_common_ration'),
        ),
        migrations.AddConstraint(
            model_name='addcommonration',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_common_ration'),
        ),
        migrations.AlterUniqueTogether(
            name='addcommonration',
            unique_together={('item', 'common_ration', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='addcommonother',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_common_other'),
        ),
        migrations.AddConstraint(
            model_name='addcommonother',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_common_other'),
        ),
        migrations.AddConstraint(
            model_name='addcommonother',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_common_other'),
        ),
        migrations.AlterUniqueTogether(
            name='addcommonother',
            unique_together={('item', 'common_other', 'unit')},
        ),
        migrations.AddConstraint(
            model_name='addcommoningredient',
            constraint=models.CheckConstraint(check=models.Q(('purchase_price__gte', 0.0)), name='purchase_price_limit_add_common_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='addcommoningredient',
            constraint=models.CheckConstraint(check=models.Q(('selling_price__gte', 0.0)), name='selling_price_limit_add_common_ingredient'),
        ),
        migrations.AddConstraint(
            model_name='addcommoningredient',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gte', 1.0)), name='quantity_limit_add_common_ingredient'),
        ),
        migrations.AlterUniqueTogether(
            name='addcommoningredient',
            unique_together={('item', 'common_ingredient', 'unit')},
        ),
    ]
